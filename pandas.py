# -*- coding: utf-8 -*-
"""pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fi3m1U4w_T6b5pxiXWvEvrAFhC2deTRd
"""

# ----------------------------------------------------------
# ðŸ“Œ Importing Required Libraries
# ----------------------------------------------------------
import numpy as np
import pandas as pd

# ----------------------------------------------------------
# ðŸ“Œ 1. Creating Series from NumPy array
# ----------------------------------------------------------
arr = np.array([1, 2, 3, 4, 5, 6])
s = pd.Series(arr)  # Default index (0 to n-1)
print("Series from NumPy array:")
print(s)
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 2. Series with custom/mutable index
# ----------------------------------------------------------
s = pd.Series(arr, index=['first', 'second', 'third', 'fourth', 'fifth', 'sixth'])
print("Series with custom index:")
print(s)
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 3. Series from scalar value
# ----------------------------------------------------------
s = pd.Series(50, index=[0, 1, 2, 3])
print("Series from scalar value (same value repeated):")
print(s)
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 4. Series from Dictionary
# ----------------------------------------------------------
d = {'name': 'shubham', 'surname': 'solanki', 'college': 'nirma'}
s = pd.Series(d)  # Dictionary keys become index
print("Series from dictionary:")
print(s)
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 5. Mathematical operations on NumPy array
# ----------------------------------------------------------
print("Multiplication (arr * 2):", arr * 2)
print("Power (arr ** 2):", arr ** 2)
print("Values greater than 2:", arr[arr > 2])
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 6. Head and Tail Functions
# ----------------------------------------------------------
s = pd.Series(arr)
print("First 5 elements (head):")
print(s.head())  # Default: first 5 elements
print("Last 5 elements (tail):")
print(s.tail())  # Default: last 5 elements
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 7. Selection in Series using loc & iloc
# ----------------------------------------------------------
print("Using loc (label-based) [2:3]:")
print(s.loc[2:3])  # Includes end label
print("Using iloc (index-based) [2:4]:")
print(s.iloc[2:4])  # Does NOT include end
print("Using direct slicing [1:4]:")
print(s[1:4])
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 8. Slicing in Series with step
# ----------------------------------------------------------
print("Slicing [1:5:2]:", s[1:5:2])
print("Slicing [0:6:2]:", s[0:6:2])
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 9. Creating a DataFrame from Series
# ----------------------------------------------------------
s = pd.Series(['a', 'b', 'c', 'd'])
df = pd.DataFrame(s)
print("DataFrame from single Series:")
print(df)
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 10. DataFrame from Dictionary of Series
# ----------------------------------------------------------
name = pd.Series(['Hardik', 'Virat'])
team = pd.Series(['MI', 'RCB'])
dic = {'Name': name, 'Team': team}
df = pd.DataFrame(dic)
print("DataFrame from dictionary of Series:")
print(df)
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 11. Add & Rename Columns in DataFrame
# ----------------------------------------------------------
s = pd.Series([10, 20, 30, 40])
df = pd.DataFrame(s)
df.columns = ['List1']             # Renaming column
df['List2'] = 20                   # Adding a new column with scalar value
df['List3'] = df['List1'] + df['List2']  # Arithmetic operation column-wise
print("DataFrame after adding & renaming columns:")
print(df)
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 12. Delete Columns & Rows using drop()
# ----------------------------------------------------------
s = pd.Series([10, 12, 14, 16])
df = pd.DataFrame(s)
df.columns = ['List1']
df['List2'] = 40

df1 = df.drop('List2', axis=1)           # Dropping column
df2 = df.drop(index=[2, 3], axis=0)      # Dropping rows
print("Original DataFrame:")
print(df)
print("\nAfter column deletion:")
print(df1)
print("\nAfter row deletion:")
print(df2)
print("\n")

# ----------------------------------------------------------
# ðŸ“Œ 13. Accessing DataFrame using loc() and iloc()
# ----------------------------------------------------------
Runs = {
    'TCS': {'Qtr1': 2500, 'Qtr2': 2000, 'Qtr3': 3000},
    'WIPRO': {'Qtr1': 2800, 'Qtr2': 2400, 'Qtr3': 3600},
    'L&T': {'Qtr1': 2100, 'Qtr2': 5700, 'Qtr3': 3500}
}
df = pd.DataFrame(Runs)
print("Multi-level DataFrame from nested dict:")
print(df)
print("\n")

# Access a specific row using loc (by index label)
print("Row for Qtr3 using loc:")
print(df.loc['Qtr3'])
print("\n")

# Range of rows using loc
print("Rows from Qtr1 to Qtr3 using loc:")
print(df.loc['Qtr1':'Qtr3'])
print("\n")

# Accessing using iloc (by index position)
print("Rows 0-1, Column 1 (iloc[0:2,1:2]):")
print(df.iloc[0:2, 1:2])
print("\n")

print("All rows, columns 0-1 (iloc[:,0:2]):")
print(df.iloc[:, 0:2])
print("\n")