# -*- coding: utf-8 -*-
"""matplotlib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cfgooP1yQQBcrz7yI9uCYsifurZU3RPB
"""

# Importing required libraries
import numpy as np
import matplotlib.pyplot as plt

# -------------------------------
# 1. Simple Line Plot
# -------------------------------

# Generate x values from 0 to 9
x = np.arange(0, 10)
y = x + 1  # y is just x shifted by 1

# Plotting a simple line with title and axis labels
plt.title("Line Graph")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")
plt.plot(x, y, linestyle='--', color='g')  # Dashed green line
plt.show()

# -------------------------------
# 2. Line Plot with Marker
# -------------------------------

# Same line but now with markers for each point
plt.plot(x, y, linestyle='--', color='r', marker='o')  # Red dashed line with circle markers
plt.title("Line Graph with Marker")
plt.show()

# -------------------------------
# 3. Sine Wave Plot
# -------------------------------

# Generating values for sine curve
x = np.arange(0, 3 * np.pi, 0.1)
y = np.sin(x)

# Plotting sine wave
plt.title("Sine Wave")
plt.plot(x, y)
plt.xlabel("Angle (radians)")
plt.ylabel("Sine Value")
plt.grid(True)
plt.show()

# -------------------------------
# 4. Subplots (Sine and Cosine)
# -------------------------------

x = np.arange(0, 3 * np.pi, 0.1)
y_sin = np.sin(x)
y_cos = np.cos(x)

# Two stacked subplots (2 rows, 1 column)
plt.subplot(2, 1, 1)
plt.plot(x, y_sin)
plt.title("Sine")

plt.subplot(2, 1, 2)
plt.plot(x, y_cos)
plt.title("Cosine")

plt.tight_layout()  # Prevents overlap
plt.show()

# -------------------------------
# 5. Legends in Plot
# -------------------------------

x = np.arange(1, 11)
y1 = x + 1
y2 = x + 5

plt.title("Legend Example")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")

# Add labels for legend
plt.plot(x, y1, label="Student 1")
plt.plot(x, y2, label="Student 2")
plt.legend(loc=2)  # loc=2 is top-left corner
plt.show()

# -------------------------------
# 6. Ticks Customization
# -------------------------------

plt.title("Ticks Example")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")
plt.plot(x, y1, label="Student 1")
plt.plot(x, y2, label="Student 2")
plt.legend(loc=2)

# Customize ticks on both axes
plt.xticks(np.arange(11))
plt.yticks(np.arange(16))
plt.grid(True)
plt.show()

# -------------------------------
# 7. Scatter Plot using plt.plot
# -------------------------------

x = np.arange(0, 11)
y = x + 1

plt.title("Scatter Plot with Plot()")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")

# linestyle='' means only markers, no lines
plt.plot(x, y, marker='o', color='b', linestyle='')
plt.show()

# -------------------------------
# 8. Scatter Plot using plt.scatter
# -------------------------------

x = np.arange(1, 11)
y1 = x + 1
y2 = x + 5

plt.title("Scatter Plot with plt.scatter()")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")

# Plot two scatter plots with different styles
plt.scatter(x, y1, label="Student 1")
plt.scatter(x, y2, label="Student 2")

# Rotate x-axis labels
plt.xticks(np.arange(1, 11), ['a','b','c','d','e','f','g','h','i','j'], rotation=45)
plt.yticks(np.arange(16))
plt.legend(loc=2)
plt.grid(True)
plt.show()

# -------------------------------
# 9. Scatter and Line Combined
# -------------------------------

plt.title("Scatter + Line Plot")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")

plt.scatter(x, y1, label="Student 1", marker='o', color='b')
plt.scatter(x, y2, label="Student 2", marker='^', color='r')

# Additional line plot
plt.plot(x, y1 + 2, label="Line y1 + 2")

plt.xticks(np.arange(1, 11), ['a','b','c','d','e','f','g','h','i','j'], rotation=45)
plt.yticks(np.arange(16))
plt.legend(loc=2)
plt.grid(True)
plt.show()

# -------------------------------
# 10. Bar Graph
# -------------------------------

x1 = [5, 8, 10]
y1 = [12, 16, 6]

x2 = [6, 9, 11]
y2 = [6, 15, 7]

plt.bar(x1, y1, color='b', align='center')
plt.bar(x2, y2, color='g', align='center')
plt.title("Bar Graph")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")
plt.show()

# -------------------------------
# 11. Histogram
# -------------------------------

a = np.array([22, 87, 5, 43, 56, 73, 55, 54, 11, 20, 51, 5, 79, 31, 27])

# Bins define range intervals: [0-20], [20-40], etc.
plt.hist(a, bins=[0, 20, 40, 60, 80, 100], color='b', edgecolor='k', linewidth=0.5)
plt.title("Histogram")
plt.xlabel("Marks")
plt.ylabel("Frequency")
plt.grid(True)
plt.show()