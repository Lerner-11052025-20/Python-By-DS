# -*- coding: utf-8 -*-
"""numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LqdQmQ6AO2sB1M121jz9dXL1RGRYckXQ
"""

pip install numpy

# Importing the NumPy library as np (standard alias)
import numpy as np

# -----------------------------
# 1. One-Dimensional Array
# np.array() creates a NumPy array from a Python list
print("1. One-Dimensional Array:")
a = np.array([1, 2, 3, 4])
print("Array a:", a)  # Output: [1 2 3 4]
print(" ")

# -----------------------------
# 2. Mixed-Type Array (int and float)
# NumPy automatically promotes data types (int → float here)
print("2. Array with Mixed Types (int and float):")
b = np.array([1, 2, 3.5, 4])
print("Array b:", b)  # Output: [1.  2.  3.5 4. ]
print(" ")

# -----------------------------
# 3. linspace(start, stop, num_elements)
# Generates 'num_elements' equally spaced values from start to stop (inclusive)
print("3. Linspace Array:")
a = np.linspace(1, 10, 10)
print("Linspace a:", a)  # Output: [1. 2. 3. ... 10.]
print(" ")

# -----------------------------
# 4. arange(start, stop, step)
# Works like Python's range(), but returns a NumPy array
print("4. Arange Examples:")
a = np.arange(10)           # Default start=0, step=1 → [0 1 2 ... 9]
b = np.arange(5, 10)        # From 5 to 9
c = np.arange(10, 1, -1)    # From 10 to 2, step -1
print("a = np.arange(10):", a)
print("b = np.arange(5, 10):", b)
print("c = np.arange(10, 1, -1):", c)
print(" ")

# -----------------------------
# 5. Zeros and Ones
# Creates arrays filled with 0s or 1s of specified size
print("5. Zeros and Ones:")
k = np.zeros(5)             # 1D array with five 0s → [0. 0. 0. 0. 0.]
s = np.ones(4)              # 1D array with four 1s → [1. 1. 1. 1.]
print("Zeros array k:", k)
print("Ones array s:", s)
print(" ")

# Importing NumPy
import numpy as np

# -----------------------------
# 1. Mathematical Operations on Arrays
# Operations are element-wise (vectorized)
print("1. Mathematical Operations:")
K = np.array([10, 20, 30, 40, 50])

K = K + 5         # Add 5 to every element
print("K + 5 =", K)

K = K - 5         # Subtract 5 from every element
print("K - 5 =", K)

K = K * 5         # Multiply every element by 5
print("K * 5 =", K)

K = K / 5         # Divide every element by 5
print("K / 5 =", K)
print(" ")

# -----------------------------
# 2. Aliasing an Array (creates a reference)
print("2. Aliasing:")
k = np.array([1, 2, 3, 4, 5])
h = k             # h points to the same data as k

print("Original h:", h)
print("Original k:", k)

k[0] = 35         # Changing k also changes h (because they point to same array)
print("After k[0] = 35")
print("h:", h)
print("k:", k)
print(" ")

# -----------------------------
# 3. Copying an Array (creates a new object)
print("3. Using copy() to create independent array:")
k = np.array([1, 2, 3, 4, 5])
h = k.copy()      # h is a deep copy of k

print("Original h:", h)
print("Original k:", k)

k[0] = 35         # Changing k does NOT affect h
print("After k[0] = 35")
print("h:", h)
print("k:", k)
print(" ")

# Import NumPy
import numpy as np

# -----------------------------
# 1. Creating a Two-Dimensional Array
print("1. Two-Dimensional Array:")
a = np.array([[1, 2, 3], [4, 5, 6]])
print("Array a:\n", a)
print(" ")

# -----------------------------
# 2. .ndim - Get the number of dimensions
# ndim = 1 for 1D array, ndim = 2 for 2D array
print("2. .ndim - Number of Dimensions:")
a = np.array([1, 2, 3])                     # 1D array
b = np.array([[1, 2, 3], [2, 3, 4]])        # 2D array
print("a.ndim =", a.ndim)  # Output: 1
print("b.ndim =", b.ndim)  # Output: 2
print(" ")

# -----------------------------
# 3. .shape - Tuple of array dimensions (rows, cols)
print("3. .shape - Shape of Arrays:")
print("a.shape =", a.shape)
print("b.shape =", b.shape)
print(" ")

# -----------------------------
# 4. .size - Total number of elements
print("4. .size - Total Number of Elements:")
print("a.size =", a.size)  # 3 elements in 1D
print("b.size =", b.size)  # 6 elements in 2D
print(" ")

# -----------------------------
# 5. .itemsize - Size (in bytes) of one array element
print("5. .itemsize - Size of One Element:")
print("a.itemsize =", a.itemsize)
print(" ")

# -----------------------------
# 6. .reshape() - Change the shape of the array
print("6. .reshape() - Reshape the Array:")
# Original shape of b is (2, 3) → reshape to (3, 2)
b = b.reshape(3, 2)
print("Reshaped b:\n", b)
print(" ")

# -----------------------------
# 7. np.empty() - Creates an uninitialized array (random values)
print("7. np.empty() - Empty Array of Integers (Uninitialized):")
x = np.empty([3, 2], dtype=int)
print("Empty array x:\n", x)
print(" ")

# Importing the NumPy library
import numpy as np

# --------------------------------------
# 1. Slicing in 1D Array
# --------------------------------------
print("1. Slicing in 1D Array:")
A = np.array([1, 2, 3, 4, 5, 6, 7])  # Creating a 1D array

print("A[:5] →", A[:5])        # First 5 elements (index 0 to 4)
print("A[2:4] →", A[2:4])      # Elements from index 2 to 3
print("A[0:7:2] →", A[0:7:2])  # Every second element from index 0 to 6
print("A[-1:-5:-1] →", A[-1:-5:-1])  # Reverse from last element to the 4th element
print(" ")

# --------------------------------------
# 2. Slicing in 2D Array
# --------------------------------------
print("2. Slicing in 2D Array:")
b = np.array([[1, 2, 3], [4, 5, 6]])  # 2x3 matrix

# Slice both rows and columns: rows 0 and 1, columns 0 to 2
print("b[0:2, 0:3] →\n", b[0:2, 0:3])

# Same as above: all rows and all columns explicitly
print("b[:2, :3] →\n", b[:2, :3])
print(" ")

# --------------------------------------
# 3. Identity Matrix (eye)
# --------------------------------------
print("3. Identity Matrix (eye):")
a = np.eye(3)  # Creates a 3x3 identity matrix
print(a)
print(" ")

# --------------------------------------
# 4. Zeros and Ones in 2D Arrays
# --------------------------------------
print("4. Zeros and Ones in 2D:")
y = np.zeros([3, 2], dtype=int)  # 3x2 array of zeros (integer type)
print("Zeros:\n", y)

z = np.ones([2, 2], dtype=int)   # 2x2 array of ones
print("Ones:\n", z)
print(" ")

# --------------------------------------
# 5. Concatenate Function
# --------------------------------------
print("5. Concatenate Arrays:")
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
c = np.concatenate([a, b])  # Concatenate two 1D arrays
print("Concatenated:", c)
print(" ")

# --------------------------------------
# 6. Horizontal Stack (hstack)
# --------------------------------------
print("6. Horizontal Stack:")
c = np.hstack((a, b))  # Horizontally stack two 1D arrays
print("hstack:", c)
print(" ")

# --------------------------------------
# 7. Vertical Stack (vstack)
# --------------------------------------
print("7. Vertical Stack:")
c = np.vstack((a, b))  # Vertically stack two 1D arrays into a 2D array
print("vstack:\n", c)
print(" ")

# --------------------------------------
# 8. Split Function (1D Array)
# --------------------------------------
print("8. Split 1D Array:")
x = [1, 2, 3, 4, 5, 6, 7, 8]
x1, x2, x3 = np.split(x, [3, 5])  # Split at indices 3 and 5
print("x1:", x1)  # [1, 2, 3]
print("x2:", x2)  # [4, 5]
print("x3:", x3)  # [6, 7, 8]
print(" ")

# --------------------------------------
# 9. Horizontal Split (2D Array)
# --------------------------------------
print("9. Horizontal Split (hsplit):")
a = np.arange(16).reshape((4, 4))  # 4x4 matrix with values from 0 to 15
left, right = np.hsplit(a, 2)  # Split matrix into two 4x2 matrices column-wise
print("Left part:\n", left)
print("Right part:\n", right)
print(" ")

# --------------------------------------
# 10. Vertical Split (2D Array)
# --------------------------------------
print("10. Vertical Split (vsplit):")
top, bottom = np.vsplit(a, 2)  # Split matrix into two 2x4 matrices row-wise
print("Top part:\n", top)
print("Bottom part:\n", bottom)
print(" ")